===============================================================================
									Costea Mihai 
===============================================================================
===============================================================================
Firstly, the entry data is read and the labyrinth gets created. Afterwards, 
depending on the task, a strategy is chosen. If task 1 gets chosen, the hero or
the object is placed inside the starting cell and the algorithm presented in 
the exercise tries to find the exit. The algorithm was implemented using the 
complex number logic, specifically, a number multiplied by I actually make a 90 
degrees rotation in plane. Considering this is a 2D object, such as a labyrinth,
everything worked correctly. However, I had to inverse the left and right 
directions because when the ordinate was growing I was supposed to lower the 
line indices, therefore reversing the up and down directions. But, by rotating 
the plane by 180 degrees (right becomes left and vice versa), this problem was
successfully resolved. The hero uses a method that says which cells are adjacent
to the cell he's standing in (the hero's perspective). Afterwards, he compares 
them using a TreeSet with a comparator. The comparator respects the relative 
order to the hero's orientation and always chooses an exit cell if possible.
After the cells were sorted by priority, the hero chooses the first and 
advances. He takes note of how many times he was in the previous cell. Once he 
reaches the exit, the path he followed is displayed in the file.

===============================================================================
===============================================================================

Task 2 implements an algorithm in which the hero walks on all the paths 
simultaneously in parallel and stops once he finds the route on one of the 
paths. Afterwards, he starts noting his way. As a queue i used a linked list
because of it's proprerty that I can delete an element from the front or the
back of the list in O(1).

===============================================================================
===============================================================================

Am explicat in acest README in mare cum functioneaza programul, detalii mai 
legate de implementare le contine javadoc-ul aferent atasat temei, si
comentariile din cod.

===============================================================================
=============================================================================